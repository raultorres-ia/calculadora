<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculadora Moderna</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .calculator {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 25px 45px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.2);
            max-width: 350px;
            width: 100%;
            animation: slideIn 0.6s ease-out;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .display {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            text-align: right;
            min-height: 80px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .previous-operand {
            color: rgba(255, 255, 255, 0.6);
            font-size: 16px;
            margin-bottom: 5px;
            word-wrap: break-word;
            word-break: break-all;
        }

        .current-operand {
            color: white;
            font-size: 32px;
            font-weight: 300;
            word-wrap: break-word;
            word-break: break-all;
        }

        .button-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 12px;
        }

        button {
            height: 60px;
            border: none;
            border-radius: 15px;
            font-size: 18px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            position: relative;
            overflow: hidden;
        }

        button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        button:hover::before {
            left: 100%;
        }

        .number, .decimal {
            background: rgba(255, 255, 255, 0.1);
            color: white;
        }

        .number:hover, .decimal:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }

        .operator {
            background: rgba(255, 107, 107, 0.8);
            color: white;
        }

        .operator:hover {
            background: rgba(255, 107, 107, 1);
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(255, 107, 107, 0.3);
        }

        .equals {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            grid-column: span 2;
        }

        .equals:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.4);
        }

        .clear {
            background: rgba(255, 193, 7, 0.8);
            color: white;
        }

        .clear:hover {
            background: rgba(255, 193, 7, 1);
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(255, 193, 7, 0.3);
        }

        .delete {
            background: rgba(220, 53, 69, 0.8);
            color: white;
        }

        .delete:hover {
            background: rgba(220, 53, 69, 1);
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(220, 53, 69, 0.3);
        }

        button:active {
            transform: scale(0.95);
        }

        @media (max-width: 400px) {
            .calculator {
                padding: 20px;
            }
            
            button {
                height: 50px;
                font-size: 16px;
            }
            
            .current-operand {
                font-size: 28px;
            }
        }
    </style>
</head>
<body>
    <div class="calculator">
        <div class="display">
            <div class="previous-operand" id="previous-operand"></div>
            <div class="current-operand" id="current-operand">0</div>
        </div>
        <div class="button-grid">
            <button class="clear" onclick="clearAll()">AC</button>
            <button class="delete" onclick="deleteLast()">⌫</button>
            <button class="operator" onclick="chooseOperation('÷')">÷</button>
            <button class="operator" onclick="chooseOperation('×')">×</button>
            
            <button class="number" onclick="appendNumber('7')">7</button>
            <button class="number" onclick="appendNumber('8')">8</button>
            <button class="number" onclick="appendNumber('9')">9</button>
            <button class="operator" onclick="chooseOperation('-')">-</button>
            
            <button class="number" onclick="appendNumber('4')">4</button>
            <button class="number" onclick="appendNumber('5')">5</button>
            <button class="number" onclick="appendNumber('6')">6</button>
            <button class="operator" onclick="chooseOperation('+')">+</button>
            
            <button class="number" onclick="appendNumber('1')">1</button>
            <button class="number" onclick="appendNumber('2')">2</button>
            <button class="number" onclick="appendNumber('3')">3</button>
            <button class="equals" onclick="compute()" rowspan="2">=</button>
            
            <button class="number" onclick="appendNumber('0')" style="grid-column: span 2;">0</button>
            <button class="decimal" onclick="appendNumber('.')">.</button>
        </div>
    </div>

    <script>
        let currentOperand = '0';
        let previousOperand = '';
        let operation = null;

        const currentOperandElement = document.getElementById('current-operand');
        const previousOperandElement = document.getElementById('previous-operand');

        function updateDisplay() {
            currentOperandElement.textContent = currentOperand;
            if (operation != null) {
                previousOperandElement.textContent = `${previousOperand} ${operation}`;
            } else {
                previousOperandElement.textContent = '';
            }
        }

        function appendNumber(number) {
            if (number === '.' && currentOperand.includes('.')) return;
            if (currentOperand === '0' && number !== '.') {
                currentOperand = number;
            } else {
                currentOperand = currentOperand + number;
            }
            updateDisplay();
        }

        function chooseOperation(selectedOperation) {
            if (currentOperand === '') return;
            if (previousOperand !== '') {
                compute();
            }
            operation = selectedOperation;
            previousOperand = currentOperand;
            currentOperand = '';
            updateDisplay();
        }

        function compute() {
            let computation;
            const prev = parseFloat(previousOperand);
            const current = parseFloat(currentOperand);
            if (isNaN(prev) || isNaN(current)) return;

            switch (operation) {
                case '+':
                    computation = prev + current;
                    break;
                case '-':
                    computation = prev - current;
                    break;
                case '×':
                    computation = prev * current;
                    break;
                case '÷':
                    if (current === 0) {
                        alert('Error: División por cero');
                        return;
                    }
                    computation = prev / current;
                    break;
                default:
                    return;
            }

            currentOperand = computation.toString();
            operation = null;
            previousOperand = '';
            updateDisplay();
        }

        function clearAll() {
            currentOperand = '0';
            previousOperand = '';
            operation = null;
            updateDisplay();
        }

        function deleteLast() {
            if (currentOperand.length === 1) {
                currentOperand = '0';
            } else {
                currentOperand = currentOperand.slice(0, -1);
            }
            updateDisplay();
        }

        // Soporte para teclado
        document.addEventListener('keydown', function(event) {
            if (event.key >= '0' && event.key <= '9') {
                appendNumber(event.key);
            } else if (event.key === '.') {
                appendNumber('.');
            } else if (event.key === '+') {
                chooseOperation('+');
            } else if (event.key === '-') {
                chooseOperation('-');
            } else if (event.key === '*') {
                chooseOperation('×');
            } else if (event.key === '/') {
                event.preventDefault();
                chooseOperation('÷');
            } else if (event.key === 'Enter' || event.key === '=') {
                compute();
            } else if (event.key === 'Escape') {
                clearAll();
            } else if (event.key === 'Backspace') {
                deleteLast();
            }
        });

        updateDisplay();
    </script>
</body>
</html>